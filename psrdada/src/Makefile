# Makefile.in generated by automake 1.11.3 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.







pkgdatadir = $(datadir)/dada
pkgincludedir = $(includedir)/dada
pkglibdir = $(libdir)/dada
pkglibexecdir = $(libexecdir)/dada
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = dada_db$(EXEEXT) dada_write_test$(EXEEXT) \
	dada_dbdisk$(EXEEXT) dada_diskdb$(EXEEXT) dada_dbnic$(EXEEXT) \
	dada_nicdb$(EXEEXT) dada_dbNdb$(EXEEXT) \
	dada_install_header$(EXEEXT) dada_pwc_command$(EXEEXT) \
	dada_pwc_demo$(EXEEXT) dada_dbnull$(EXEEXT) \
	dada_dbmonitor$(EXEEXT) dada_dbxferinfo$(EXEEXT) \
	dada_dbmetric$(EXEEXT) dada_header$(EXEEXT) dada_edit$(EXEEXT) \
	slow_rm$(EXEEXT) dada_junkdb$(EXEEXT) dada_mem_test$(EXEEXT) \
	daemon_test$(EXEEXT) load_test$(EXEEXT) dada_numdb$(EXEEXT) \
	dada_dbnum$(EXEEXT) dada_dbmeminfo$(EXEEXT) \
	dspsr_start_time$(EXEEXT) dada_dboverflow$(EXEEXT) \
	dada_dbscrubber$(EXEEXT) test_disk_perf$(EXEEXT) \
	dada_dbcopydb$(EXEEXT) dada_dbevent$(EXEEXT) \
	dada_dbmergedb$(EXEEXT) dada_zerodb$(EXEEXT) $(am__EXEEXT_1) \
	$(am__EXEEXT_2)
check_PROGRAMS = test_multilog$(EXEEXT) test_ipcbuf$(EXEEXT) \
	loop_ipcio$(EXEEXT) test_command_parser$(EXEEXT) \
	test_multilog_server$(EXEEXT) telnecho$(EXEEXT) \
	test_command_parse_server$(EXEEXT) test_dada_nexus$(EXEEXT) \
	dada_writer$(EXEEXT) dada_reader$(EXEEXT) $(am__EXEEXT_3)
TESTS = test_uint64_t$(EXEEXT) test_disk_array$(EXEEXT) \
	test_ipcio$(EXEEXT) test_ascii_header$(EXEEXT)
DIST_COMMON = $(am__include_HEADERS_DIST) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(top_srcdir)/cuda.mk

###############################################################################
#
# Depends on CUDA
#
###############################################################################
am__append_1 = dada_cuda.cu dada_cuda.h ipcio_cuda.cu ipcbuf_cuda.cu ipcio_cuda.h ipcbuf_cuda.h
am__append_2 = dada_cuda.h ipcio_cuda.h ipcbuf_cuda.h
am__append_3 = dada_dbgpu

###############################################################################
#
# Depends on librdmacm
#
###############################################################################
#am__append_4 = dada_ib.c dada_ib_datagram.c
#am__append_5 = dada_ib.h dada_ib_datagram.h
#am__append_6 = dada_ibdb dada_dbib dada_udheader dada_dbud dada_udgen
#am__append_7 =  $(top_builddir)/3rdparty/libtimers.la
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/config/acx_pthread.m4 \
	$(top_srcdir)/config/affinity.m4 \
	$(top_srcdir)/config/ax_openmp.m4 $(top_srcdir)/config/cuda.m4 \
	$(top_srcdir)/config/fftw.m4 $(top_srcdir)/config/gsl.m4 \
	$(top_srcdir)/config/hwloc.m4 $(top_srcdir)/config/ipp.m4 \
	$(top_srcdir)/config/libtool.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mkl.m4 $(top_srcdir)/config/package.m4 \
	$(top_srcdir)/config/pgplot.m4 $(top_srcdir)/config/rdmacm.m4 \
	$(top_srcdir)/config/sofa.m4 $(top_srcdir)/config/x11.m4 \
	$(top_srcdir)/config/xgpu.m4 $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \
	"$(DESTDIR)$(bindir)" "$(DESTDIR)$(includedir)"
LTLIBRARIES = $(lib_LTLIBRARIES)
libpsrdada_la_DEPENDENCIES =
am__libpsrdada_la_SOURCES_DIST = ascii_header.h command_parse.h \
	command_parse_server.h dada_client.h dada_def.h \
	dada_generator.h dada_hdu.h dada_msg.h dada_ni.h dada_pwc.h \
	dada_pwc_main.h dada_pwc_main_multi.h dada_pwc_nexus.h \
	dada_udp.h daemon.h diff_time.h disk_array.h futils.h ipcbuf.h \
	ipcio.h ipcutil.h median_smooth_zap.h monitor.h multilog.h \
	nexus.h node_array.h sock.h string_array.h tmutil.h udp.h \
	ascii_header.c multilog.c sock.c monitor.c ipcutil.c ipcbuf.c \
	ipcio.c disk_array.c node_array.c command_parse.c \
	command_parse_server.c string_array.c diff_time.c nexus.c \
	filesize.c fileread.c tmutil.c daemon.c dada_hdu.c dada_pwc.c \
	dada_pwc_nexus.c dada_ni.c dada_pwc_main.c \
	dada_pwc_main_multi.c dada_client.c dada_pwc_nexus_config.c \
	dada_pwc_nexus_header_parse.c multilog_server.c dada_udp.c \
	dada_generator.c dada_affinity.c dada_cuda.cu dada_cuda.h \
	ipcio_cuda.cu ipcbuf_cuda.cu ipcio_cuda.h ipcbuf_cuda.h \
	dada_ib.c dada_ib_datagram.c
am__objects_1 =
am__objects_2 = dada_cuda.lo ipcio_cuda.lo \
	ipcbuf_cuda.lo
#am__objects_3 = dada_ib.lo dada_ib_datagram.lo
am_libpsrdada_la_OBJECTS = $(am__objects_1) ascii_header.lo \
	multilog.lo sock.lo monitor.lo ipcutil.lo ipcbuf.lo ipcio.lo \
	disk_array.lo node_array.lo command_parse.lo \
	command_parse_server.lo string_array.lo diff_time.lo nexus.lo \
	filesize.lo fileread.lo tmutil.lo daemon.lo dada_hdu.lo \
	dada_pwc.lo dada_pwc_nexus.lo dada_ni.lo dada_pwc_main.lo \
	dada_pwc_main_multi.lo dada_client.lo dada_pwc_nexus_config.lo \
	dada_pwc_nexus_header_parse.lo multilog_server.lo dada_udp.lo \
	dada_generator.lo dada_affinity.lo $(am__objects_2) \
	$(am__objects_3)
libpsrdada_la_OBJECTS = $(am_libpsrdada_la_OBJECTS)
am__EXEEXT_1 = dada_dbgpu$(EXEEXT)
#am__EXEEXT_2 = dada_ibdb$(EXEEXT) dada_dbib$(EXEEXT) \
#	dada_udheader$(EXEEXT) dada_dbud$(EXEEXT) \
#	dada_udgen$(EXEEXT)
am__EXEEXT_3 = test_uint64_t$(EXEEXT) test_disk_array$(EXEEXT) \
	test_ipcio$(EXEEXT) test_ascii_header$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)
dada_db_SOURCES = dada_db.c
dada_db_OBJECTS = dada_db.$(OBJEXT)
dada_db_LDADD = $(LDADD)
#am__DEPENDENCIES_1 =  \
#	$(top_builddir)/3rdparty/libtimers.la
dada_db_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_db_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(dada_db_LDFLAGS) \
	$(LDFLAGS) -o $@
dada_dbNdb_SOURCES = dada_dbNdb.c
dada_dbNdb_OBJECTS = dada_dbNdb.$(OBJEXT)
dada_dbNdb_LDADD = $(LDADD)
dada_dbNdb_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbcopydb_SOURCES = dada_dbcopydb.c
dada_dbcopydb_OBJECTS = dada_dbcopydb.$(OBJEXT)
dada_dbcopydb_LDADD = $(LDADD)
dada_dbcopydb_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbdisk_SOURCES = dada_dbdisk.c
dada_dbdisk_OBJECTS = dada_dbdisk.$(OBJEXT)
dada_dbdisk_LDADD = $(LDADD)
dada_dbdisk_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbevent_SOURCES = dada_dbevent.c
dada_dbevent_OBJECTS = dada_dbevent.$(OBJEXT)
dada_dbevent_LDADD = $(LDADD)
dada_dbevent_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbgpu_SOURCES = dada_dbgpu.c
dada_dbgpu_OBJECTS = dada_dbgpu.$(OBJEXT)
am__DEPENDENCIES_2 = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbgpu_DEPENDENCIES = $(am__DEPENDENCIES_2)
dada_dbib_SOURCES = dada_dbib.c
dada_dbib_OBJECTS = dada_dbib.$(OBJEXT)
dada_dbib_LDADD = $(LDADD)
dada_dbib_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbmeminfo_SOURCES = dada_dbmeminfo.c
dada_dbmeminfo_OBJECTS = dada_dbmeminfo.$(OBJEXT)
dada_dbmeminfo_LDADD = $(LDADD)
dada_dbmeminfo_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbmergedb_SOURCES = dada_dbmergedb.c
dada_dbmergedb_OBJECTS = dada_dbmergedb.$(OBJEXT)
dada_dbmergedb_LDADD = $(LDADD)
dada_dbmergedb_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbmetric_SOURCES = dada_dbmetric.c
dada_dbmetric_OBJECTS = dada_dbmetric.$(OBJEXT)
dada_dbmetric_LDADD = $(LDADD)
dada_dbmetric_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbmonitor_SOURCES = dada_dbmonitor.c
dada_dbmonitor_OBJECTS = dada_dbmonitor.$(OBJEXT)
dada_dbmonitor_LDADD = $(LDADD)
dada_dbmonitor_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbnic_SOURCES = dada_dbnic.c
dada_dbnic_OBJECTS = dada_dbnic.$(OBJEXT)
dada_dbnic_LDADD = $(LDADD)
dada_dbnic_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbnull_SOURCES = dada_dbnull.c
dada_dbnull_OBJECTS = dada_dbnull.$(OBJEXT)
dada_dbnull_LDADD = $(LDADD)
dada_dbnull_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbnum_SOURCES = dada_dbnum.c
dada_dbnum_OBJECTS = dada_dbnum.$(OBJEXT)
dada_dbnum_LDADD = $(LDADD)
dada_dbnum_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dboverflow_SOURCES = dada_dboverflow.c
dada_dboverflow_OBJECTS = dada_dboverflow.$(OBJEXT)
dada_dboverflow_LDADD = $(LDADD)
dada_dboverflow_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbscrubber_SOURCES = dada_dbscrubber.c
dada_dbscrubber_OBJECTS = dada_dbscrubber.$(OBJEXT)
dada_dbscrubber_LDADD = $(LDADD)
dada_dbscrubber_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbud_SOURCES = dada_dbud.c
dada_dbud_OBJECTS = dada_dbud.$(OBJEXT)
dada_dbud_LDADD = $(LDADD)
dada_dbud_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_dbxferinfo_SOURCES = dada_dbxferinfo.c
dada_dbxferinfo_OBJECTS = dada_dbxferinfo.$(OBJEXT)
dada_dbxferinfo_LDADD = $(LDADD)
dada_dbxferinfo_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_diskdb_SOURCES = dada_diskdb.c
dada_diskdb_OBJECTS = dada_diskdb.$(OBJEXT)
dada_diskdb_LDADD = $(LDADD)
dada_diskdb_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_edit_SOURCES = dada_edit.c
dada_edit_OBJECTS = dada_edit.$(OBJEXT)
dada_edit_LDADD = $(LDADD)
dada_edit_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_header_SOURCES = dada_header.c
dada_header_OBJECTS = dada_header.$(OBJEXT)
dada_header_LDADD = $(LDADD)
dada_header_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_ibdb_SOURCES = dada_ibdb.c
dada_ibdb_OBJECTS = dada_ibdb.$(OBJEXT)
dada_ibdb_LDADD = $(LDADD)
dada_ibdb_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_install_header_SOURCES = dada_install_header.c
dada_install_header_OBJECTS = dada_install_header.$(OBJEXT)
dada_install_header_LDADD = $(LDADD)
dada_install_header_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_junkdb_SOURCES = dada_junkdb.c
dada_junkdb_OBJECTS = dada_junkdb.$(OBJEXT)
dada_junkdb_LDADD = $(LDADD)
dada_junkdb_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_mem_test_SOURCES = dada_mem_test.c
dada_mem_test_OBJECTS = dada_mem_test.$(OBJEXT)
dada_mem_test_LDADD = $(LDADD)
dada_mem_test_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_nicdb_SOURCES = dada_nicdb.c
dada_nicdb_OBJECTS = dada_nicdb.$(OBJEXT)
dada_nicdb_LDADD = $(LDADD)
dada_nicdb_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_numdb_SOURCES = dada_numdb.c
dada_numdb_OBJECTS = dada_numdb.$(OBJEXT)
dada_numdb_LDADD = $(LDADD)
dada_numdb_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_pwc_command_SOURCES = dada_pwc_command.c
dada_pwc_command_OBJECTS = dada_pwc_command.$(OBJEXT)
dada_pwc_command_LDADD = $(LDADD)
dada_pwc_command_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_pwc_demo_SOURCES = dada_pwc_demo.c
dada_pwc_demo_OBJECTS = dada_pwc_demo.$(OBJEXT)
dada_pwc_demo_LDADD = $(LDADD)
dada_pwc_demo_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_reader_SOURCES = dada_reader.c
dada_reader_OBJECTS = dada_reader.$(OBJEXT)
dada_reader_LDADD = $(LDADD)
dada_reader_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_udgen_SOURCES = dada_udgen.c
dada_udgen_OBJECTS = dada_udgen.$(OBJEXT)
dada_udgen_LDADD = $(LDADD)
dada_udgen_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_udheader_SOURCES = dada_udheader.c
dada_udheader_OBJECTS = dada_udheader.$(OBJEXT)
dada_udheader_LDADD = $(LDADD)
dada_udheader_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_write_test_SOURCES = dada_write_test.c
dada_write_test_OBJECTS = dada_write_test.$(OBJEXT)
dada_write_test_LDADD = $(LDADD)
dada_write_test_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_writer_SOURCES = dada_writer.c
dada_writer_OBJECTS = dada_writer.$(OBJEXT)
dada_writer_LDADD = $(LDADD)
dada_writer_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dada_zerodb_SOURCES = dada_zerodb.c
dada_zerodb_OBJECTS = dada_zerodb.$(OBJEXT)
dada_zerodb_LDADD = $(LDADD)
dada_zerodb_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
daemon_test_SOURCES = daemon_test.c
daemon_test_OBJECTS = daemon_test.$(OBJEXT)
daemon_test_LDADD = $(LDADD)
daemon_test_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
dspsr_start_time_SOURCES = dspsr_start_time.c
dspsr_start_time_OBJECTS = dspsr_start_time.$(OBJEXT)
dspsr_start_time_LDADD = $(LDADD)
dspsr_start_time_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
load_test_SOURCES = load_test.c
load_test_OBJECTS = load_test.$(OBJEXT)
load_test_LDADD = $(LDADD)
load_test_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
loop_ipcio_SOURCES = loop_ipcio.c
loop_ipcio_OBJECTS = loop_ipcio.$(OBJEXT)
loop_ipcio_LDADD = $(LDADD)
loop_ipcio_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
slow_rm_SOURCES = slow_rm.c
slow_rm_OBJECTS = slow_rm.$(OBJEXT)
slow_rm_LDADD = $(LDADD)
slow_rm_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
telnecho_SOURCES = telnecho.c
telnecho_OBJECTS = telnecho.$(OBJEXT)
telnecho_LDADD = $(LDADD)
telnecho_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
test_ascii_header_SOURCES = test_ascii_header.c
test_ascii_header_OBJECTS = test_ascii_header.$(OBJEXT)
test_ascii_header_LDADD = $(LDADD)
test_ascii_header_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
test_command_parse_server_SOURCES = test_command_parse_server.c
test_command_parse_server_OBJECTS =  \
	test_command_parse_server.$(OBJEXT)
test_command_parse_server_LDADD = $(LDADD)
test_command_parse_server_DEPENDENCIES = libpsrdada.la \
	$(am__DEPENDENCIES_1)
test_command_parser_SOURCES = test_command_parser.c
test_command_parser_OBJECTS = test_command_parser.$(OBJEXT)
test_command_parser_LDADD = $(LDADD)
test_command_parser_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
test_dada_nexus_SOURCES = test_dada_nexus.c
test_dada_nexus_OBJECTS = test_dada_nexus.$(OBJEXT)
test_dada_nexus_LDADD = $(LDADD)
test_dada_nexus_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
test_disk_array_SOURCES = test_disk_array.c
test_disk_array_OBJECTS = test_disk_array.$(OBJEXT)
test_disk_array_LDADD = $(LDADD)
test_disk_array_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
test_disk_perf_SOURCES = test_disk_perf.c
test_disk_perf_OBJECTS = test_disk_perf.$(OBJEXT)
test_disk_perf_LDADD = $(LDADD)
test_disk_perf_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
test_ipcbuf_SOURCES = test_ipcbuf.c
test_ipcbuf_OBJECTS = test_ipcbuf.$(OBJEXT)
test_ipcbuf_LDADD = $(LDADD)
test_ipcbuf_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
test_ipcio_SOURCES = test_ipcio.c
test_ipcio_OBJECTS = test_ipcio.$(OBJEXT)
test_ipcio_LDADD = $(LDADD)
test_ipcio_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
test_multilog_SOURCES = test_multilog.c
test_multilog_OBJECTS = test_multilog.$(OBJEXT)
test_multilog_LDADD = $(LDADD)
test_multilog_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
test_multilog_server_SOURCES = test_multilog_server.c
test_multilog_server_OBJECTS = test_multilog_server.$(OBJEXT)
test_multilog_server_LDADD = $(LDADD)
test_multilog_server_DEPENDENCIES = libpsrdada.la \
	$(am__DEPENDENCIES_1)
test_uint64_t_SOURCES = test_uint64_t.c
test_uint64_t_OBJECTS = test_uint64_t.$(OBJEXT)
test_uint64_t_LDADD = $(LDADD)
test_uint64_t_DEPENDENCIES = libpsrdada.la $(am__DEPENDENCIES_1)
SCRIPTS = $(bin_SCRIPTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libpsrdada_la_SOURCES) dada_db.c dada_dbNdb.c \
	dada_dbcopydb.c dada_dbdisk.c dada_dbevent.c dada_dbgpu.c \
	dada_dbib.c dada_dbmeminfo.c dada_dbmergedb.c dada_dbmetric.c \
	dada_dbmonitor.c dada_dbnic.c dada_dbnull.c dada_dbnum.c \
	dada_dboverflow.c dada_dbscrubber.c dada_dbud.c \
	dada_dbxferinfo.c dada_diskdb.c dada_edit.c dada_header.c \
	dada_ibdb.c dada_install_header.c dada_junkdb.c \
	dada_mem_test.c dada_nicdb.c dada_numdb.c dada_pwc_command.c \
	dada_pwc_demo.c dada_reader.c dada_udgen.c dada_udheader.c \
	dada_write_test.c dada_writer.c dada_zerodb.c daemon_test.c \
	dspsr_start_time.c load_test.c loop_ipcio.c slow_rm.c \
	telnecho.c test_ascii_header.c test_command_parse_server.c \
	test_command_parser.c test_dada_nexus.c test_disk_array.c \
	test_disk_perf.c test_ipcbuf.c test_ipcio.c test_multilog.c \
	test_multilog_server.c test_uint64_t.c
DIST_SOURCES = $(am__libpsrdada_la_SOURCES_DIST) dada_db.c \
	dada_dbNdb.c dada_dbcopydb.c dada_dbdisk.c dada_dbevent.c \
	dada_dbgpu.c dada_dbib.c dada_dbmeminfo.c dada_dbmergedb.c \
	dada_dbmetric.c dada_dbmonitor.c dada_dbnic.c dada_dbnull.c \
	dada_dbnum.c dada_dboverflow.c dada_dbscrubber.c dada_dbud.c \
	dada_dbxferinfo.c dada_diskdb.c dada_edit.c dada_header.c \
	dada_ibdb.c dada_install_header.c dada_junkdb.c \
	dada_mem_test.c dada_nicdb.c dada_numdb.c dada_pwc_command.c \
	dada_pwc_demo.c dada_reader.c dada_udgen.c dada_udheader.c \
	dada_write_test.c dada_writer.c dada_zerodb.c daemon_test.c \
	dspsr_start_time.c load_test.c loop_ipcio.c slow_rm.c \
	telnecho.c test_ascii_header.c test_command_parse_server.c \
	test_command_parser.c test_dada_nexus.c test_disk_array.c \
	test_disk_perf.c test_ipcbuf.c test_ipcio.c test_multilog.c \
	test_multilog_server.c test_uint64_t.c
am__include_HEADERS_DIST = ascii_header.h multilog.h sock.h monitor.h \
	ipcutil.h ipcbuf.h ipcio.h disk_array.h node_array.h \
	command_parse.h command_parse_server.h string_array.h \
	diff_time.h nexus.h futils.h tmutil.h daemon.h dada_def.h \
	dada_hdu.h dada_pwc.h dada_pwc_nexus.h dada_ni.h \
	dada_pwc_main.h dada_pwc_main_multi.h dada_client.h udp.h \
	dada_udp.h dada_generator.h dada_affinity.h dada_msg.h \
	dada_cuda.h ipcio_cuda.h ipcbuf_cuda.h dada_ib.h \
	dada_ib_datagram.h
HEADERS = $(include_HEADERS)
ETAGS = etags
CTAGS = ctags
am__tty_colors = \
red=; grn=; lgn=; blu=; std=
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/nch/opt/psrdada/missing --run aclocal-1.11
AMTAR = $${TAR-tar}
AR = ar
AUTOCONF = ${SHELL} /home/nch/opt/psrdada/missing --run autoconf
AUTOHEADER = ${SHELL} /home/nch/opt/psrdada/missing --run autoheader
AUTOMAKE = ${SHELL} /home/nch/opt/psrdada/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -pthread
CPP = gcc -E
CPPFLAGS = -I/usr/local/include 
CUB_CFLAGS = 
CUDA_CFLAGS = -I/usr/local/cuda-8.0/include
CUDA_LIBS = -L/usr/local/cuda-8.0/lib64 -lcudart
CUDA_NVCC = /usr/local/cuda-8.0/bin/nvcc $(CUDA_NVCC_FLAGS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)
CUFFT_CFLAGS = -I/usr/local/cuda-8.0/include
CUFFT_LIBS = -L/usr/local/cuda-8.0/lib64 -lcufft
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -pthread
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = f77
FFLAGS = -g -O2
FFTW_CFLAGS =  
FFTW_LIBS = -L/usr/lib -lfftw3f -lm 
FGREP = /bin/grep -F
FLIBS = 
GREP = /bin/grep
GSL_CFLAGS = -I/usr/include
GSL_CONFIG = /usr/bin/gsl-config
GSL_LIBS = -L/usr/lib -lgsl -lgslcblas -lm
HWLOC_CFLAGS = 
HWLOC_LIBS = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
IPP_CFLAGS = 
IPP_LIBS = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = -L/usr/local/lib 
LIBOBJS = 
LIBS = -lm  
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LOGIN_ARCH = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/nch/opt/psrdada/missing --run makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
MKL_CFLAGS = 
MKL_LIBS = 
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OPENMP_CFLAGS = -fopenmp
OTOOL = 
OTOOL64 = 
PACKAGE = dada
PACKAGES = 
PACKAGE_BUGREPORT = straten@astron.nl
PACKAGE_NAME = DADA
PACKAGE_STRING = DADA 1.0
PACKAGE_TARNAME = dada
PACKAGE_URL = 
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
PGPLOT_CFLAGS = 
PGPLOT_DIR = 
PGPLOT_LIBS =  -lcpgplot -lpgplot  
PSRDADA_INSTALL = /home/nch/linux_64
PSRHOME = 
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
RANLIB = ranlib
RDMACM_CFLAGS = 
RDMACM_LIBS = 
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SOFA_CFLAGS = 
SOFA_LIBS = 
STRIP = strip
VERSION = 1.0
XGPU_CFLAGS = 
XGPU_LIBS = -L/usr/local/lib -lxgpu
XMKMF = 
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS =  -lSM -lICE
abs_builddir = /home/nch/opt/psrdada/src
abs_srcdir = /home/nch/opt/psrdada/src
abs_top_builddir = /home/nch/opt/psrdada
abs_top_srcdir = /home/nch/opt/psrdada
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
ac_ct_F77 = f77
acx_pthread_config = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
cuda_nvcc = /usr/local/cuda-8.0/bin/nvcc
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/nch/opt/psrdada/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /home/nch/linux_64
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
lib_LTLIBRARIES = libpsrdada.la
psrdada_hdr = ascii_header.h command_parse.h command_parse_server.h \
	    dada_client.h dada_def.h dada_generator.h dada_hdu.h  \
	    dada_msg.h dada_ni.h dada_pwc.h dada_pwc_main.h       \
	    dada_pwc_main_multi.h                                 \
	    dada_pwc_nexus.h dada_udp.h daemon.h diff_time.h      \
	    disk_array.h futils.h ipcbuf.h ipcio.h ipcutil.h      \
	    median_smooth_zap.h monitor.h multilog.h nexus.h      \
	    node_array.h sock.h string_array.h tmutil.h udp.h

libpsrdada_la_SOURCES = $(psrdada_hdr) ascii_header.c multilog.c \
	sock.c monitor.c ipcutil.c ipcbuf.c ipcio.c disk_array.c \
	node_array.c command_parse.c command_parse_server.c \
	string_array.c diff_time.c nexus.c filesize.c fileread.c \
	tmutil.c daemon.c dada_hdu.c dada_pwc.c dada_pwc_nexus.c \
	dada_ni.c dada_pwc_main.c dada_pwc_main_multi.c dada_client.c \
	dada_pwc_nexus_config.c dada_pwc_nexus_header_parse.c \
	multilog_server.c dada_udp.c dada_generator.c dada_affinity.c \
	$(am__append_1) $(am__append_4)
include_HEADERS = ascii_header.h multilog.h sock.h monitor.h ipcutil.h \
	ipcbuf.h ipcio.h disk_array.h node_array.h command_parse.h \
	command_parse_server.h string_array.h diff_time.h nexus.h \
	futils.h tmutil.h daemon.h dada_def.h dada_hdu.h dada_pwc.h \
	dada_pwc_nexus.h dada_ni.h dada_pwc_main.h \
	dada_pwc_main_multi.h dada_client.h udp.h dada_udp.h \
	dada_generator.h dada_affinity.h dada_msg.h $(am__append_2) \
	$(am__append_5)
bin_SCRIPTS = ipcrme loopssh
LDADD = libpsrdada.la $(am__append_7)
EXTRA_DIST = ipcrme loopssh

###############################################################################
#
# Depends on HWLOC
#
###############################################################################
#dada_db_LDFLAGS = $(LDADD) 
dada_dbgpu_LDADD = $(LDADD) -lstdc++
AM_CPPFLAGS = -I/usr/local/cuda-8.0/include 
libpsrdada_la_LIBADD = -L/usr/local/cuda-8.0/lib64 -lcudart
#AM_CFLAGS = -I$(top_srcdir)/3rdparty
all: all-am

.SUFFIXES:
.SUFFIXES: .c .cu .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/cuda.mk $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/cuda.mk:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libpsrdada.la: $(libpsrdada_la_OBJECTS) $(libpsrdada_la_DEPENDENCIES) $(EXTRA_libpsrdada_la_DEPENDENCIES) 
	$(LINK) -rpath $(libdir) $(libpsrdada_la_OBJECTS) $(libpsrdada_la_LIBADD) $(LIBS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
dada_db$(EXEEXT): $(dada_db_OBJECTS) $(dada_db_DEPENDENCIES) $(EXTRA_dada_db_DEPENDENCIES) 
	@rm -f dada_db$(EXEEXT)
	$(dada_db_LINK) $(dada_db_OBJECTS) $(dada_db_LDADD) $(LIBS)
dada_dbNdb$(EXEEXT): $(dada_dbNdb_OBJECTS) $(dada_dbNdb_DEPENDENCIES) $(EXTRA_dada_dbNdb_DEPENDENCIES) 
	@rm -f dada_dbNdb$(EXEEXT)
	$(LINK) $(dada_dbNdb_OBJECTS) $(dada_dbNdb_LDADD) $(LIBS)
dada_dbcopydb$(EXEEXT): $(dada_dbcopydb_OBJECTS) $(dada_dbcopydb_DEPENDENCIES) $(EXTRA_dada_dbcopydb_DEPENDENCIES) 
	@rm -f dada_dbcopydb$(EXEEXT)
	$(LINK) $(dada_dbcopydb_OBJECTS) $(dada_dbcopydb_LDADD) $(LIBS)
dada_dbdisk$(EXEEXT): $(dada_dbdisk_OBJECTS) $(dada_dbdisk_DEPENDENCIES) $(EXTRA_dada_dbdisk_DEPENDENCIES) 
	@rm -f dada_dbdisk$(EXEEXT)
	$(LINK) $(dada_dbdisk_OBJECTS) $(dada_dbdisk_LDADD) $(LIBS)
dada_dbevent$(EXEEXT): $(dada_dbevent_OBJECTS) $(dada_dbevent_DEPENDENCIES) $(EXTRA_dada_dbevent_DEPENDENCIES) 
	@rm -f dada_dbevent$(EXEEXT)
	$(LINK) $(dada_dbevent_OBJECTS) $(dada_dbevent_LDADD) $(LIBS)
dada_dbgpu$(EXEEXT): $(dada_dbgpu_OBJECTS) $(dada_dbgpu_DEPENDENCIES) $(EXTRA_dada_dbgpu_DEPENDENCIES) 
	@rm -f dada_dbgpu$(EXEEXT)
	$(LINK) $(dada_dbgpu_OBJECTS) $(dada_dbgpu_LDADD) $(LIBS)
dada_dbib$(EXEEXT): $(dada_dbib_OBJECTS) $(dada_dbib_DEPENDENCIES) $(EXTRA_dada_dbib_DEPENDENCIES) 
	@rm -f dada_dbib$(EXEEXT)
	$(LINK) $(dada_dbib_OBJECTS) $(dada_dbib_LDADD) $(LIBS)
dada_dbmeminfo$(EXEEXT): $(dada_dbmeminfo_OBJECTS) $(dada_dbmeminfo_DEPENDENCIES) $(EXTRA_dada_dbmeminfo_DEPENDENCIES) 
	@rm -f dada_dbmeminfo$(EXEEXT)
	$(LINK) $(dada_dbmeminfo_OBJECTS) $(dada_dbmeminfo_LDADD) $(LIBS)
dada_dbmergedb$(EXEEXT): $(dada_dbmergedb_OBJECTS) $(dada_dbmergedb_DEPENDENCIES) $(EXTRA_dada_dbmergedb_DEPENDENCIES) 
	@rm -f dada_dbmergedb$(EXEEXT)
	$(LINK) $(dada_dbmergedb_OBJECTS) $(dada_dbmergedb_LDADD) $(LIBS)
dada_dbmetric$(EXEEXT): $(dada_dbmetric_OBJECTS) $(dada_dbmetric_DEPENDENCIES) $(EXTRA_dada_dbmetric_DEPENDENCIES) 
	@rm -f dada_dbmetric$(EXEEXT)
	$(LINK) $(dada_dbmetric_OBJECTS) $(dada_dbmetric_LDADD) $(LIBS)
dada_dbmonitor$(EXEEXT): $(dada_dbmonitor_OBJECTS) $(dada_dbmonitor_DEPENDENCIES) $(EXTRA_dada_dbmonitor_DEPENDENCIES) 
	@rm -f dada_dbmonitor$(EXEEXT)
	$(LINK) $(dada_dbmonitor_OBJECTS) $(dada_dbmonitor_LDADD) $(LIBS)
dada_dbnic$(EXEEXT): $(dada_dbnic_OBJECTS) $(dada_dbnic_DEPENDENCIES) $(EXTRA_dada_dbnic_DEPENDENCIES) 
	@rm -f dada_dbnic$(EXEEXT)
	$(LINK) $(dada_dbnic_OBJECTS) $(dada_dbnic_LDADD) $(LIBS)
dada_dbnull$(EXEEXT): $(dada_dbnull_OBJECTS) $(dada_dbnull_DEPENDENCIES) $(EXTRA_dada_dbnull_DEPENDENCIES) 
	@rm -f dada_dbnull$(EXEEXT)
	$(LINK) $(dada_dbnull_OBJECTS) $(dada_dbnull_LDADD) $(LIBS)
dada_dbnum$(EXEEXT): $(dada_dbnum_OBJECTS) $(dada_dbnum_DEPENDENCIES) $(EXTRA_dada_dbnum_DEPENDENCIES) 
	@rm -f dada_dbnum$(EXEEXT)
	$(LINK) $(dada_dbnum_OBJECTS) $(dada_dbnum_LDADD) $(LIBS)
dada_dboverflow$(EXEEXT): $(dada_dboverflow_OBJECTS) $(dada_dboverflow_DEPENDENCIES) $(EXTRA_dada_dboverflow_DEPENDENCIES) 
	@rm -f dada_dboverflow$(EXEEXT)
	$(LINK) $(dada_dboverflow_OBJECTS) $(dada_dboverflow_LDADD) $(LIBS)
dada_dbscrubber$(EXEEXT): $(dada_dbscrubber_OBJECTS) $(dada_dbscrubber_DEPENDENCIES) $(EXTRA_dada_dbscrubber_DEPENDENCIES) 
	@rm -f dada_dbscrubber$(EXEEXT)
	$(LINK) $(dada_dbscrubber_OBJECTS) $(dada_dbscrubber_LDADD) $(LIBS)
dada_dbud$(EXEEXT): $(dada_dbud_OBJECTS) $(dada_dbud_DEPENDENCIES) $(EXTRA_dada_dbud_DEPENDENCIES) 
	@rm -f dada_dbud$(EXEEXT)
	$(LINK) $(dada_dbud_OBJECTS) $(dada_dbud_LDADD) $(LIBS)
dada_dbxferinfo$(EXEEXT): $(dada_dbxferinfo_OBJECTS) $(dada_dbxferinfo_DEPENDENCIES) $(EXTRA_dada_dbxferinfo_DEPENDENCIES) 
	@rm -f dada_dbxferinfo$(EXEEXT)
	$(LINK) $(dada_dbxferinfo_OBJECTS) $(dada_dbxferinfo_LDADD) $(LIBS)
dada_diskdb$(EXEEXT): $(dada_diskdb_OBJECTS) $(dada_diskdb_DEPENDENCIES) $(EXTRA_dada_diskdb_DEPENDENCIES) 
	@rm -f dada_diskdb$(EXEEXT)
	$(LINK) $(dada_diskdb_OBJECTS) $(dada_diskdb_LDADD) $(LIBS)
dada_edit$(EXEEXT): $(dada_edit_OBJECTS) $(dada_edit_DEPENDENCIES) $(EXTRA_dada_edit_DEPENDENCIES) 
	@rm -f dada_edit$(EXEEXT)
	$(LINK) $(dada_edit_OBJECTS) $(dada_edit_LDADD) $(LIBS)
dada_header$(EXEEXT): $(dada_header_OBJECTS) $(dada_header_DEPENDENCIES) $(EXTRA_dada_header_DEPENDENCIES) 
	@rm -f dada_header$(EXEEXT)
	$(LINK) $(dada_header_OBJECTS) $(dada_header_LDADD) $(LIBS)
dada_ibdb$(EXEEXT): $(dada_ibdb_OBJECTS) $(dada_ibdb_DEPENDENCIES) $(EXTRA_dada_ibdb_DEPENDENCIES) 
	@rm -f dada_ibdb$(EXEEXT)
	$(LINK) $(dada_ibdb_OBJECTS) $(dada_ibdb_LDADD) $(LIBS)
dada_install_header$(EXEEXT): $(dada_install_header_OBJECTS) $(dada_install_header_DEPENDENCIES) $(EXTRA_dada_install_header_DEPENDENCIES) 
	@rm -f dada_install_header$(EXEEXT)
	$(LINK) $(dada_install_header_OBJECTS) $(dada_install_header_LDADD) $(LIBS)
dada_junkdb$(EXEEXT): $(dada_junkdb_OBJECTS) $(dada_junkdb_DEPENDENCIES) $(EXTRA_dada_junkdb_DEPENDENCIES) 
	@rm -f dada_junkdb$(EXEEXT)
	$(LINK) $(dada_junkdb_OBJECTS) $(dada_junkdb_LDADD) $(LIBS)
dada_mem_test$(EXEEXT): $(dada_mem_test_OBJECTS) $(dada_mem_test_DEPENDENCIES) $(EXTRA_dada_mem_test_DEPENDENCIES) 
	@rm -f dada_mem_test$(EXEEXT)
	$(LINK) $(dada_mem_test_OBJECTS) $(dada_mem_test_LDADD) $(LIBS)
dada_nicdb$(EXEEXT): $(dada_nicdb_OBJECTS) $(dada_nicdb_DEPENDENCIES) $(EXTRA_dada_nicdb_DEPENDENCIES) 
	@rm -f dada_nicdb$(EXEEXT)
	$(LINK) $(dada_nicdb_OBJECTS) $(dada_nicdb_LDADD) $(LIBS)
dada_numdb$(EXEEXT): $(dada_numdb_OBJECTS) $(dada_numdb_DEPENDENCIES) $(EXTRA_dada_numdb_DEPENDENCIES) 
	@rm -f dada_numdb$(EXEEXT)
	$(LINK) $(dada_numdb_OBJECTS) $(dada_numdb_LDADD) $(LIBS)
dada_pwc_command$(EXEEXT): $(dada_pwc_command_OBJECTS) $(dada_pwc_command_DEPENDENCIES) $(EXTRA_dada_pwc_command_DEPENDENCIES) 
	@rm -f dada_pwc_command$(EXEEXT)
	$(LINK) $(dada_pwc_command_OBJECTS) $(dada_pwc_command_LDADD) $(LIBS)
dada_pwc_demo$(EXEEXT): $(dada_pwc_demo_OBJECTS) $(dada_pwc_demo_DEPENDENCIES) $(EXTRA_dada_pwc_demo_DEPENDENCIES) 
	@rm -f dada_pwc_demo$(EXEEXT)
	$(LINK) $(dada_pwc_demo_OBJECTS) $(dada_pwc_demo_LDADD) $(LIBS)
dada_reader$(EXEEXT): $(dada_reader_OBJECTS) $(dada_reader_DEPENDENCIES) $(EXTRA_dada_reader_DEPENDENCIES) 
	@rm -f dada_reader$(EXEEXT)
	$(LINK) $(dada_reader_OBJECTS) $(dada_reader_LDADD) $(LIBS)
dada_udgen$(EXEEXT): $(dada_udgen_OBJECTS) $(dada_udgen_DEPENDENCIES) $(EXTRA_dada_udgen_DEPENDENCIES) 
	@rm -f dada_udgen$(EXEEXT)
	$(LINK) $(dada_udgen_OBJECTS) $(dada_udgen_LDADD) $(LIBS)
dada_udheader$(EXEEXT): $(dada_udheader_OBJECTS) $(dada_udheader_DEPENDENCIES) $(EXTRA_dada_udheader_DEPENDENCIES) 
	@rm -f dada_udheader$(EXEEXT)
	$(LINK) $(dada_udheader_OBJECTS) $(dada_udheader_LDADD) $(LIBS)
dada_write_test$(EXEEXT): $(dada_write_test_OBJECTS) $(dada_write_test_DEPENDENCIES) $(EXTRA_dada_write_test_DEPENDENCIES) 
	@rm -f dada_write_test$(EXEEXT)
	$(LINK) $(dada_write_test_OBJECTS) $(dada_write_test_LDADD) $(LIBS)
dada_writer$(EXEEXT): $(dada_writer_OBJECTS) $(dada_writer_DEPENDENCIES) $(EXTRA_dada_writer_DEPENDENCIES) 
	@rm -f dada_writer$(EXEEXT)
	$(LINK) $(dada_writer_OBJECTS) $(dada_writer_LDADD) $(LIBS)
dada_zerodb$(EXEEXT): $(dada_zerodb_OBJECTS) $(dada_zerodb_DEPENDENCIES) $(EXTRA_dada_zerodb_DEPENDENCIES) 
	@rm -f dada_zerodb$(EXEEXT)
	$(LINK) $(dada_zerodb_OBJECTS) $(dada_zerodb_LDADD) $(LIBS)
daemon_test$(EXEEXT): $(daemon_test_OBJECTS) $(daemon_test_DEPENDENCIES) $(EXTRA_daemon_test_DEPENDENCIES) 
	@rm -f daemon_test$(EXEEXT)
	$(LINK) $(daemon_test_OBJECTS) $(daemon_test_LDADD) $(LIBS)
dspsr_start_time$(EXEEXT): $(dspsr_start_time_OBJECTS) $(dspsr_start_time_DEPENDENCIES) $(EXTRA_dspsr_start_time_DEPENDENCIES) 
	@rm -f dspsr_start_time$(EXEEXT)
	$(LINK) $(dspsr_start_time_OBJECTS) $(dspsr_start_time_LDADD) $(LIBS)
load_test$(EXEEXT): $(load_test_OBJECTS) $(load_test_DEPENDENCIES) $(EXTRA_load_test_DEPENDENCIES) 
	@rm -f load_test$(EXEEXT)
	$(LINK) $(load_test_OBJECTS) $(load_test_LDADD) $(LIBS)
loop_ipcio$(EXEEXT): $(loop_ipcio_OBJECTS) $(loop_ipcio_DEPENDENCIES) $(EXTRA_loop_ipcio_DEPENDENCIES) 
	@rm -f loop_ipcio$(EXEEXT)
	$(LINK) $(loop_ipcio_OBJECTS) $(loop_ipcio_LDADD) $(LIBS)
slow_rm$(EXEEXT): $(slow_rm_OBJECTS) $(slow_rm_DEPENDENCIES) $(EXTRA_slow_rm_DEPENDENCIES) 
	@rm -f slow_rm$(EXEEXT)
	$(LINK) $(slow_rm_OBJECTS) $(slow_rm_LDADD) $(LIBS)
telnecho$(EXEEXT): $(telnecho_OBJECTS) $(telnecho_DEPENDENCIES) $(EXTRA_telnecho_DEPENDENCIES) 
	@rm -f telnecho$(EXEEXT)
	$(LINK) $(telnecho_OBJECTS) $(telnecho_LDADD) $(LIBS)
test_ascii_header$(EXEEXT): $(test_ascii_header_OBJECTS) $(test_ascii_header_DEPENDENCIES) $(EXTRA_test_ascii_header_DEPENDENCIES) 
	@rm -f test_ascii_header$(EXEEXT)
	$(LINK) $(test_ascii_header_OBJECTS) $(test_ascii_header_LDADD) $(LIBS)
test_command_parse_server$(EXEEXT): $(test_command_parse_server_OBJECTS) $(test_command_parse_server_DEPENDENCIES) $(EXTRA_test_command_parse_server_DEPENDENCIES) 
	@rm -f test_command_parse_server$(EXEEXT)
	$(LINK) $(test_command_parse_server_OBJECTS) $(test_command_parse_server_LDADD) $(LIBS)
test_command_parser$(EXEEXT): $(test_command_parser_OBJECTS) $(test_command_parser_DEPENDENCIES) $(EXTRA_test_command_parser_DEPENDENCIES) 
	@rm -f test_command_parser$(EXEEXT)
	$(LINK) $(test_command_parser_OBJECTS) $(test_command_parser_LDADD) $(LIBS)
test_dada_nexus$(EXEEXT): $(test_dada_nexus_OBJECTS) $(test_dada_nexus_DEPENDENCIES) $(EXTRA_test_dada_nexus_DEPENDENCIES) 
	@rm -f test_dada_nexus$(EXEEXT)
	$(LINK) $(test_dada_nexus_OBJECTS) $(test_dada_nexus_LDADD) $(LIBS)
test_disk_array$(EXEEXT): $(test_disk_array_OBJECTS) $(test_disk_array_DEPENDENCIES) $(EXTRA_test_disk_array_DEPENDENCIES) 
	@rm -f test_disk_array$(EXEEXT)
	$(LINK) $(test_disk_array_OBJECTS) $(test_disk_array_LDADD) $(LIBS)
test_disk_perf$(EXEEXT): $(test_disk_perf_OBJECTS) $(test_disk_perf_DEPENDENCIES) $(EXTRA_test_disk_perf_DEPENDENCIES) 
	@rm -f test_disk_perf$(EXEEXT)
	$(LINK) $(test_disk_perf_OBJECTS) $(test_disk_perf_LDADD) $(LIBS)
test_ipcbuf$(EXEEXT): $(test_ipcbuf_OBJECTS) $(test_ipcbuf_DEPENDENCIES) $(EXTRA_test_ipcbuf_DEPENDENCIES) 
	@rm -f test_ipcbuf$(EXEEXT)
	$(LINK) $(test_ipcbuf_OBJECTS) $(test_ipcbuf_LDADD) $(LIBS)
test_ipcio$(EXEEXT): $(test_ipcio_OBJECTS) $(test_ipcio_DEPENDENCIES) $(EXTRA_test_ipcio_DEPENDENCIES) 
	@rm -f test_ipcio$(EXEEXT)
	$(LINK) $(test_ipcio_OBJECTS) $(test_ipcio_LDADD) $(LIBS)
test_multilog$(EXEEXT): $(test_multilog_OBJECTS) $(test_multilog_DEPENDENCIES) $(EXTRA_test_multilog_DEPENDENCIES) 
	@rm -f test_multilog$(EXEEXT)
	$(LINK) $(test_multilog_OBJECTS) $(test_multilog_LDADD) $(LIBS)
test_multilog_server$(EXEEXT): $(test_multilog_server_OBJECTS) $(test_multilog_server_DEPENDENCIES) $(EXTRA_test_multilog_server_DEPENDENCIES) 
	@rm -f test_multilog_server$(EXEEXT)
	$(LINK) $(test_multilog_server_OBJECTS) $(test_multilog_server_LDADD) $(LIBS)
test_uint64_t$(EXEEXT): $(test_uint64_t_OBJECTS) $(test_uint64_t_DEPENDENCIES) $(EXTRA_test_uint64_t_DEPENDENCIES) 
	@rm -f test_uint64_t$(EXEEXT)
	$(LINK) $(test_uint64_t_OBJECTS) $(test_uint64_t_LDADD) $(LIBS)
install-binSCRIPTS: $(bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f "$$d$$p"; then echo "$$d$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n' \
	    -e 'h;s|.*|.|' \
	    -e 'p;x;s,.*/,,;$(transform)' | sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1; } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) { files[d] = files[d] " " $$1; \
	      if (++n[d] == $(am__install_max)) { \
		print "f", d, files[d]; n[d] = 0; files[d] = "" } } \
	    else { print "f", d "/" $$4, $$1 } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	     if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	     test -z "$$files" || { \
	       echo " $(INSTALL_SCRIPT) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	       $(INSTALL_SCRIPT) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	     } \
	; done

uninstall-binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || exit 0; \
	files=`for p in $$list; do echo "$$p"; done | \
	       sed -e 's,.*/,,;$(transform)'`; \
	dir='$(DESTDIR)$(bindir)'; $(am__uninstall_files_from_dir)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/ascii_header.Plo
include ./$(DEPDIR)/command_parse.Plo
include ./$(DEPDIR)/command_parse_server.Plo
include ./$(DEPDIR)/dada_affinity.Plo
include ./$(DEPDIR)/dada_client.Plo
include ./$(DEPDIR)/dada_db.Po
include ./$(DEPDIR)/dada_dbNdb.Po
include ./$(DEPDIR)/dada_dbcopydb.Po
include ./$(DEPDIR)/dada_dbdisk.Po
include ./$(DEPDIR)/dada_dbevent.Po
include ./$(DEPDIR)/dada_dbgpu.Po
include ./$(DEPDIR)/dada_dbib.Po
include ./$(DEPDIR)/dada_dbmeminfo.Po
include ./$(DEPDIR)/dada_dbmergedb.Po
include ./$(DEPDIR)/dada_dbmetric.Po
include ./$(DEPDIR)/dada_dbmonitor.Po
include ./$(DEPDIR)/dada_dbnic.Po
include ./$(DEPDIR)/dada_dbnull.Po
include ./$(DEPDIR)/dada_dbnum.Po
include ./$(DEPDIR)/dada_dboverflow.Po
include ./$(DEPDIR)/dada_dbscrubber.Po
include ./$(DEPDIR)/dada_dbud.Po
include ./$(DEPDIR)/dada_dbxferinfo.Po
include ./$(DEPDIR)/dada_diskdb.Po
include ./$(DEPDIR)/dada_edit.Po
include ./$(DEPDIR)/dada_generator.Plo
include ./$(DEPDIR)/dada_hdu.Plo
include ./$(DEPDIR)/dada_header.Po
include ./$(DEPDIR)/dada_ib.Plo
include ./$(DEPDIR)/dada_ib_datagram.Plo
include ./$(DEPDIR)/dada_ibdb.Po
include ./$(DEPDIR)/dada_install_header.Po
include ./$(DEPDIR)/dada_junkdb.Po
include ./$(DEPDIR)/dada_mem_test.Po
include ./$(DEPDIR)/dada_ni.Plo
include ./$(DEPDIR)/dada_nicdb.Po
include ./$(DEPDIR)/dada_numdb.Po
include ./$(DEPDIR)/dada_pwc.Plo
include ./$(DEPDIR)/dada_pwc_command.Po
include ./$(DEPDIR)/dada_pwc_demo.Po
include ./$(DEPDIR)/dada_pwc_main.Plo
include ./$(DEPDIR)/dada_pwc_main_multi.Plo
include ./$(DEPDIR)/dada_pwc_nexus.Plo
include ./$(DEPDIR)/dada_pwc_nexus_config.Plo
include ./$(DEPDIR)/dada_pwc_nexus_header_parse.Plo
include ./$(DEPDIR)/dada_reader.Po
include ./$(DEPDIR)/dada_udgen.Po
include ./$(DEPDIR)/dada_udheader.Po
include ./$(DEPDIR)/dada_udp.Plo
include ./$(DEPDIR)/dada_write_test.Po
include ./$(DEPDIR)/dada_writer.Po
include ./$(DEPDIR)/dada_zerodb.Po
include ./$(DEPDIR)/daemon.Plo
include ./$(DEPDIR)/daemon_test.Po
include ./$(DEPDIR)/diff_time.Plo
include ./$(DEPDIR)/disk_array.Plo
include ./$(DEPDIR)/dspsr_start_time.Po
include ./$(DEPDIR)/fileread.Plo
include ./$(DEPDIR)/filesize.Plo
include ./$(DEPDIR)/ipcbuf.Plo
include ./$(DEPDIR)/ipcio.Plo
include ./$(DEPDIR)/ipcutil.Plo
include ./$(DEPDIR)/load_test.Po
include ./$(DEPDIR)/loop_ipcio.Po
include ./$(DEPDIR)/monitor.Plo
include ./$(DEPDIR)/multilog.Plo
include ./$(DEPDIR)/multilog_server.Plo
include ./$(DEPDIR)/nexus.Plo
include ./$(DEPDIR)/node_array.Plo
include ./$(DEPDIR)/slow_rm.Po
include ./$(DEPDIR)/sock.Plo
include ./$(DEPDIR)/string_array.Plo
include ./$(DEPDIR)/telnecho.Po
include ./$(DEPDIR)/test_ascii_header.Po
include ./$(DEPDIR)/test_command_parse_server.Po
include ./$(DEPDIR)/test_command_parser.Po
include ./$(DEPDIR)/test_dada_nexus.Po
include ./$(DEPDIR)/test_disk_array.Po
include ./$(DEPDIR)/test_disk_perf.Po
include ./$(DEPDIR)/test_ipcbuf.Po
include ./$(DEPDIR)/test_ipcio.Po
include ./$(DEPDIR)/test_multilog.Po
include ./$(DEPDIR)/test_multilog_server.Po
include ./$(DEPDIR)/test_uint64_t.Po
include ./$(DEPDIR)/tmutil.Plo

.c.o:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c -o $@ $<

.c.obj:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
	$(LTCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(includedir)" || $(MKDIR_P) "$(DESTDIR)$(includedir)"
	@list='$(include_HEADERS)'; test -n "$(includedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(includedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(includedir)" || exit $$?; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; test -n "$(includedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(includedir)'; $(am__uninstall_files_from_dir)

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    col="$$grn"; \
	  else \
	    col="$$red"; \
	  fi; \
	  echo "$${col}$$dashes$${std}"; \
	  echo "$${col}$$banner$${std}"; \
	  test -z "$$skipped" || echo "$${col}$$skipped$${std}"; \
	  test -z "$$report" || echo "$${col}$$report$${std}"; \
	  echo "$${col}$$dashes$${std}"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(SCRIPTS) $(HEADERS)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(includedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-checkPROGRAMS clean-generic \
	clean-libLTLIBRARIES clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-includeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS install-binSCRIPTS \
	install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-binSCRIPTS \
	uninstall-includeHEADERS uninstall-libLTLIBRARIES

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-binPROGRAMS clean-checkPROGRAMS clean-generic \
	clean-libLTLIBRARIES clean-libtool ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-binSCRIPTS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-includeHEADERS install-info install-info-am \
	install-libLTLIBRARIES install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-binSCRIPTS uninstall-includeHEADERS \
	uninstall-libLTLIBRARIES


.cu.o:
	$(CUDA_NVCC) $(CUDA_CFLAGS) $(CUDA_NVCC_CFLAGS) -o $@ -c $<

.cu.lo:
	$(top_srcdir)/cudalt.py $@ $(CUDA_NVCC) $(CUDA_CFLAGS) $(CUDA_NVCC_CFLAGS) --compiler-options=\" $(CFLAGS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \" -c $<

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
